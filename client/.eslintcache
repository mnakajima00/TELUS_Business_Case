[{"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reportWebVitals.js":"1","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\App.js":"2","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\index.js":"3","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\Dashboard.js":"4","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\EditForm.js":"5","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\store.js":"6","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\index.js":"7","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\user.js":"8","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\types.js":"9","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\form.js":"10","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\user.js":"11","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\utils\\api.js":"12","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\NewForm.js":"13","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\form.js":"14","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\layouts\\TopBar.js":"15","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\PreviewForm.js":"16","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\layouts\\ModalComponent.js":"17","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\PublishedForm.js":"18","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\ResponseView.js":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":1064,"mtime":1606418329511,"results":"22","hashOfConfig":"21"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":4858,"mtime":1606456620947,"results":"24","hashOfConfig":"21"},{"size":11894,"mtime":1606448921487,"results":"25","hashOfConfig":"21"},{"size":403,"mtime":1606408687847,"results":"26","hashOfConfig":"21"},{"size":158,"mtime":1606357847427,"results":"27","hashOfConfig":"21"},{"size":1513,"mtime":1606447627240,"results":"28","hashOfConfig":"21"},{"size":579,"mtime":1606455981279,"results":"29","hashOfConfig":"21"},{"size":994,"mtime":1606456028041,"results":"30","hashOfConfig":"21"},{"size":1789,"mtime":1606448077692,"results":"31","hashOfConfig":"21"},{"size":170,"mtime":1606358916459,"results":"32","hashOfConfig":"21"},{"size":10371,"mtime":1606448634389,"results":"33","hashOfConfig":"21"},{"size":1684,"mtime":1606456075981,"results":"34","hashOfConfig":"21"},{"size":390,"mtime":1606446818001,"results":"35","hashOfConfig":"21"},{"size":4417,"mtime":1606421515936,"results":"36","hashOfConfig":"21"},{"size":874,"mtime":1606427962232,"results":"37","hashOfConfig":"21"},{"size":5771,"mtime":1606444712275,"results":"38","hashOfConfig":"21"},{"size":1824,"mtime":1606457171422,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"pvtdm8",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reportWebVitals.js",[],["83","84"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\App.js",[],["85","86"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\index.js",[],["87","88"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\Dashboard.js",["89","90"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\EditForm.js",["91"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { updateForm, getForm } from '../../actions/form';\r\n\r\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\r\n\r\nimport PreviewForm from './PreviewForm';\r\n\r\nconst initState = {\r\n    title: '',\r\n    description: '',\r\n    shortTextTitle:  '',\r\n    longTextTitle: '',\r\n    multipleChoiceTitle: '',\r\n    multipleChoiceOptions: [],\r\n    checkboxTitle: '',\r\n    checkboxOptions: [],\r\n    dropdownTitle: '',\r\n    dropdownOptions: []\r\n}\r\n\r\nconst EditForm = ({\r\n    form: { form, loading },\r\n    updateForm,\r\n    getForm,\r\n    match\r\n}) => {\r\n\r\n    const [formData, setFormData] = useState(initState);\r\n\r\n    useEffect(() => {\r\n        if(!form) {\r\n            getForm(match.params.formId);\r\n        }\r\n        if(!loading && form) {\r\n            const data = { ...initState };\r\n            for(const key in form) {\r\n                if(key in data) data[key] = form[key];\r\n            }\r\n            for(const key in form.multipleChoice){\r\n                if(key in data) data[key] = form.multipleChoice[key];\r\n            }\r\n            for(const key in form.checkbox) {\r\n                if(key in data) data[key] = form.checkbox[key];\r\n            }\r\n            for(const key in form.dropdown) {\r\n                if(key in data) data[key] = form.dropdown[key];\r\n            }\r\n            setFormData(data);\r\n        }\r\n    }, [match.params.formId, form, getForm]);\r\n    // Preview\r\n    const [showPreview, setShowPreview] = useState(false);\r\n\r\n    const onChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    /* Radio Button functions */\r\n    const onRadioButtonChange = (e, key) => {\r\n        let temp = [...formData.multipleChoiceOptions];\r\n        temp[key] = e.target.value;\r\n        setFormData({ ...formData, multipleChoiceOptions: temp });\r\n    }\r\n    const addRadioOption = () => {\r\n        if(formData.multipleChoiceOptions){\r\n            setFormData(\r\n                { ...formData, multipleChoiceOptions: [...formData.multipleChoiceOptions, \"\"] }\r\n            );\r\n        } else {\r\n            setFormData(\r\n                { ...formData, multipleChoiceOptions: [\"\"] }\r\n            );\r\n        }\r\n    }\r\n    const removeRadioOption = (key) => {\r\n        let temp = [...formData.multipleChoiceOptions];\r\n        temp.splice(key, 1);\r\n        setFormData({ ...formData, multipleChoiceOptions: temp });\r\n    }\r\n\r\n    /* Checkbox functions */\r\n    const onCheckboxChange = (e, key) => {\r\n        let temp = [...formData.checkboxOptions];\r\n        temp[key] = e.target.value;\r\n        setFormData({ ...formData, checkboxOptions: temp });\r\n    }\r\n\r\n    const addCheckboxOption = () => {\r\n        if(formData.checkboxOptions){\r\n            setFormData(\r\n                { ...formData, checkboxOptions: [...formData.checkboxOptions, \"\"] }\r\n            );\r\n        } else {\r\n            setFormData({ ...formData, checkboxOptions: [\"\"] });\r\n        }\r\n        \r\n    }\r\n\r\n    const removeCheckboxOption = (key) => {\r\n        let temp = [...formData.checkboxOptions];\r\n        temp.splice(key, 1);\r\n        setFormData({ ...formData, checkboxOptions: temp });\r\n    }\r\n    /* Dropdown functions */\r\n    const onDropdownChange = (e, key) => {\r\n        let temp = [...formData.dropdownOptions];\r\n        temp[key] = e.target.value;\r\n        setFormData({ ...formData, dropdownOptions: temp });\r\n    }\r\n\r\n    const addDropdownOption = () => {\r\n        if(formData.dropdownOptions) {\r\n            setFormData(\r\n                { ...formData, dropdownOptions: [...formData.dropdownOptions, \"\"] }\r\n            );\r\n        } else {\r\n            setFormData(\r\n                { ...formData, dropdownOptions: [\"\"] }\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    const removeDropdownOption = (key) => {\r\n        let temp = [...formData.dropdownOptions];\r\n        temp.splice(key, 1);\r\n        setFormData({ ...formData, dropdownOptions: temp });\r\n    }\r\n\r\n    /* On Submit */\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        updateForm(match.params.formId, formData);\r\n    }\r\n\r\n    const {\r\n        title,\r\n        description,\r\n        shortTextTitle,\r\n        longTextTitle,\r\n        multipleChoiceTitle,\r\n        multipleChoiceOptions,\r\n        checkboxTitle,\r\n        checkboxOptions,\r\n        dropdownTitle,\r\n        dropdownOptions\r\n    } = formData;\r\n\r\n    return form && !showPreview ? (\r\n        <Container fluid>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col xs={6}>\r\n                    <Form className=\"mt-4 mb-4\" onSubmit={(e) => onSubmit(e)}>\r\n                        <Form.Group controlId=\"formDescription\" className=\"p-3 rounded bg-white\">\r\n                            <Form.Control className=\"mb-2\" type=\"text\" value={title} name=\"title\" onChange={(e) => onChange(e)} />\r\n                            <Form.Control type=\"text\" value={description} name=\"description\" onChange={(e) => onChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"textForm\" className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Short Text Field</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={shortTextTitle} name=\"shortTextTitle\" onChange={(e) => onChange(e)} />\r\n                            <Form.Control type=\"text\" readOnly={true} placeholder=\"Short answer text\" />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Long Text Field</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={longTextTitle} name=\"longTextTitle\" onChange={(e) => onChange(e)} />\r\n                            <Form.Control as='textarea' readOnly={true} />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Multiple Choice</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={multipleChoiceTitle} name=\"multipleChoiceTitle\" onChange={(e) => onChange(e)} />\r\n                            {multipleChoiceOptions && multipleChoiceOptions.length > 0 && (\r\n                                multipleChoiceOptions.map((value, key) => (\r\n                                    <Form.Row key={key} className=\"mb-2\">\r\n                                        <Col xs={4}>\r\n                                            <Form.Check label={value} type=\"radio\" disabled />\r\n                                        </Col>\r\n                                        <Col xs={7}>\r\n                                            <Form.Control type=\"text\" value={value || ''} onChange={(e) => onRadioButtonChange(e, key)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button onClick={() => removeRadioOption(key)}>-</Button>\r\n                                        </Col>\r\n                                    </Form.Row>\r\n                                ))\r\n                            )}\r\n                            <Form.Row className=\"mt-4\">\r\n                                <Button onClick={() => addRadioOption()}>+</Button>\r\n                            </Form.Row>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Checkbox</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={checkboxTitle} name=\"checkboxTitle\" onChange={(e) => onChange(e)} />\r\n                            {checkboxOptions && checkboxOptions.length > 0 && (\r\n                                checkboxOptions.map((value, key) => (\r\n                                    <Form.Row key={key} className=\"mb-2\">\r\n                                        <Col xs={4}>\r\n                                            <Form.Check label={value} type=\"checkbox\" disabled />\r\n                                        </Col>\r\n                                        <Col xs={7}>\r\n                                            <Form.Control type=\"text\" value={value || ''} onChange={(e) => onCheckboxChange(e, key)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button onClick={() => removeCheckboxOption(key)}>-</Button>\r\n                                        </Col>\r\n                                    </Form.Row>\r\n                                ))\r\n                            )}\r\n                            <Form.Row className=\"mt-4\">\r\n                                <Button onClick={() => addCheckboxOption()}>+</Button>\r\n                            </Form.Row>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Dropdown</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={dropdownTitle} name=\"dropdownTitle\" onChange={(e) => onChange(e)} />\r\n                            <Form.Control className=\"mb-2\" as=\"select\" defaultValue=\"Select\" disabled>\r\n                                {dropdownOptions && dropdownOptions.length > 0 && (\r\n                                    dropdownOptions.map((value, key) => (\r\n                                        <option>{value}</option>\r\n                                    ))\r\n                                )}\r\n                            </Form.Control>\r\n                            {dropdownOptions && dropdownOptions.length > 0 && (\r\n                                dropdownOptions.map((value, key) => (\r\n                                    <Form.Row key={key}  className=\"mb-2\">\r\n                                        <Col xs={1} className=\"text-center\">\r\n                                            <p>{key+1}.</p>\r\n                                        </Col>\r\n                                        <Col xs={10}>\r\n                                            <Form.Control type=\"text\" value={value || ''} onChange={(e) => onDropdownChange(e, key)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button onClick={() => removeDropdownOption(key)}>-</Button>\r\n                                        </Col>\r\n                                    </Form.Row>\r\n                                ))\r\n                            )}\r\n                            <Form.Row className=\"mt-4\">\r\n                                <Button onClick={() => addDropdownOption()}>+</Button>\r\n                            </Form.Row>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mt-4\">\r\n                            <Button className=\"mr-2\" type=\"submit\">Save Form</Button>\r\n                            <Button type=\"button\" onClick={() => setShowPreview(true)}>Preview Form</Button>\r\n                            <Link to=\"/\" className=\"ml-2\">Back</Link>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    ) : (\r\n        <PreviewForm formData={{ formData, setShowPreview }}/>\r\n    );\r\n}\r\n\r\nEditForm.propTypes = {\r\n    updateForm: PropTypes.func.isRequired,\r\n    getForm: PropTypes.func.isRequired,\r\n    form: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    form: state.form\r\n})\r\n\r\nexport default connect(mapStateToProps, { updateForm, getForm })(EditForm);","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\store.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\index.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\user.js",["92"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\types.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\form.js",["93"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\user.js",["94"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\utils\\api.js",[],["95","96"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\NewForm.js",["97"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\form.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\layouts\\TopBar.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\PreviewForm.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\layouts\\ModalComponent.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\PublishedForm.js",["98"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\ResponseView.js",["99","100","101"],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"102","replacedBy":"106"},{"ruleId":"104","replacedBy":"107"},{"ruleId":"102","replacedBy":"108"},{"ruleId":"104","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":32,"column":70,"nodeType":"112","messageId":"113","endLine":32,"endColumn":84},{"ruleId":"114","severity":1,"message":"115","line":37,"column":8,"nodeType":"116","endLine":37,"endColumn":69,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":53,"column":8,"nodeType":"116","endLine":53,"endColumn":44,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":18,"column":1,"nodeType":"122","endLine":62,"endColumn":2},{"ruleId":"120","severity":1,"message":"121","line":16,"column":1,"nodeType":"122","endLine":45,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":6,"column":5,"nodeType":"125","messageId":"126","endLine":6,"endColumn":20},{"ruleId":"102","replacedBy":"127"},{"ruleId":"104","replacedBy":"128"},{"ruleId":"123","severity":1,"message":"129","line":1,"column":17,"nodeType":"125","messageId":"126","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"118","line":27,"column":8,"nodeType":"116","endLine":27,"endColumn":44,"suggestions":"130"},{"ruleId":"123","severity":1,"message":"131","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":19},{"ruleId":"123","severity":1,"message":"132","line":5,"column":21,"nodeType":"125","messageId":"126","endLine":5,"endColumn":24},{"ruleId":"123","severity":1,"message":"133","line":5,"column":26,"nodeType":"125","messageId":"126","endLine":5,"endColumn":29},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],["134"],["135"],["134"],["135"],"no-dupe-keys","Duplicate key 'publishedForms'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getNotifications' and 'notifications'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["136"],"React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.",["137"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-unused-vars","'GET_FORMS_ERROR' is defined but never used.","Identifier","unusedVar",["134"],["135"],"'Fragment' is defined but never used.",["138"],"'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [forms, publishedForms, getForms, getPublishedForms, loading, notifications, getNotifications]",{"range":"145","text":"146"},"Update the dependencies array to be: [match.params.formId, form, getForm, loading]",{"range":"147","text":"148"},"Update the dependencies array to be: [form, match.params.formId, getForm, loading]",{"range":"149","text":"150"},[1185,1246],"[forms, publishedForms, getForms, getPublishedForms, loading, notifications, getNotifications]",[1513,1549],"[match.params.formId, form, getForm, loading]",[700,736],"[form, match.params.formId, getForm, loading]"]