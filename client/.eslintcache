[{"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reportWebVitals.js":"1","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\App.js":"2","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\index.js":"3","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\Dashboard.js":"4","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\EditForm.js":"5","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\store.js":"6","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\index.js":"7","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\user.js":"8","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\types.js":"9","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\form.js":"10","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\user.js":"11","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\utils\\api.js":"12","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\NewForm.js":"13","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\form.js":"14","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\layouts\\TopBar.js":"15","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\PreviewForm.js":"16","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\PublishedForm.js":"17","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\ResponseView.js":"18","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\ArchivedForm.js":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":1371,"mtime":1606526654080,"results":"22","hashOfConfig":"21"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":8841,"mtime":1606532483511,"results":"24","hashOfConfig":"21"},{"size":12360,"mtime":1606529863592,"results":"25","hashOfConfig":"21"},{"size":403,"mtime":1606408687847,"results":"26","hashOfConfig":"21"},{"size":158,"mtime":1606487698479,"results":"27","hashOfConfig":"21"},{"size":1981,"mtime":1606527981221,"results":"28","hashOfConfig":"21"},{"size":718,"mtime":1606522245060,"results":"29","hashOfConfig":"21"},{"size":1279,"mtime":1606533550001,"results":"30","hashOfConfig":"21"},{"size":2395,"mtime":1606526408384,"results":"31","hashOfConfig":"21"},{"size":170,"mtime":1606358916459,"results":"32","hashOfConfig":"21"},{"size":13917,"mtime":1606527710711,"results":"33","hashOfConfig":"21"},{"size":1779,"mtime":1606531984049,"results":"34","hashOfConfig":"21"},{"size":992,"mtime":1606519781383,"results":"35","hashOfConfig":"21"},{"size":4437,"mtime":1606498629976,"results":"36","hashOfConfig":"21"},{"size":6464,"mtime":1606534154542,"results":"37","hashOfConfig":"21"},{"size":2607,"mtime":1606519974010,"results":"38","hashOfConfig":"21"},{"size":5138,"mtime":1606527491414,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"pvtdm8",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reportWebVitals.js",[],["84","85"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\App.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\index.js",[],["86","87"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\Dashboard.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\EditForm.js",["88"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { updateForm, getForm, clearForm } from '../../actions/form';\r\nimport { clearUser } from '../../actions/user';\r\nimport { Container, Col, Row, Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport PreviewForm from './PreviewForm';\r\n\r\nconst initState = {\r\n    title: '',\r\n    description: '',\r\n    shortTextTitle:  '',\r\n    longTextTitle: '',\r\n    multipleChoiceTitle: '',\r\n    multipleChoiceOptions: [],\r\n    checkboxTitle: '',\r\n    checkboxOptions: [],\r\n    dropdownTitle: '',\r\n    dropdownOptions: []\r\n}\r\n\r\nconst EditForm = ({\r\n    form: { form, loading },\r\n    updateForm,\r\n    getForm,\r\n    clearUser,\r\n    clearForm,\r\n    match,\r\n    history\r\n}) => {\r\n\r\n    const [formData, setFormData] = useState(initState);\r\n\r\n    useEffect(() => {\r\n        if(!form) {\r\n            getForm(match.params.formId);\r\n        }\r\n        if(!loading && form) {\r\n            const data = { ...initState };\r\n            for(const key in form) {\r\n                if(key in data) data[key] = form[key];\r\n            }\r\n            for(const key in form.multipleChoice){\r\n                if(key in data) data[key] = form.multipleChoice[key];\r\n            }\r\n            for(const key in form.checkbox) {\r\n                if(key in data) data[key] = form.checkbox[key];\r\n            }\r\n            for(const key in form.dropdown) {\r\n                if(key in data) data[key] = form.dropdown[key];\r\n            }\r\n            setFormData(data);\r\n        }\r\n    }, [match.params.formId, form, getForm, loading]);\r\n    // Preview\r\n    const [showPreview, setShowPreview] = useState(false);\r\n\r\n    const onChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    /* Radio Button functions */\r\n    const onRadioButtonChange = (e, key) => {\r\n        let temp = [...formData.multipleChoiceOptions];\r\n        temp[key] = e.target.value;\r\n        setFormData({ ...formData, multipleChoiceOptions: temp });\r\n    }\r\n    const addRadioOption = () => {\r\n        if(formData.multipleChoiceOptions){\r\n            setFormData(\r\n                { ...formData, multipleChoiceOptions: [...formData.multipleChoiceOptions, \"\"] }\r\n            );\r\n        } else {\r\n            setFormData(\r\n                { ...formData, multipleChoiceOptions: [\"\"] }\r\n            );\r\n        }\r\n    }\r\n    const removeRadioOption = (key) => {\r\n        let temp = [...formData.multipleChoiceOptions];\r\n        temp.splice(key, 1);\r\n        setFormData({ ...formData, multipleChoiceOptions: temp });\r\n    }\r\n\r\n    /* Checkbox functions */\r\n    const onCheckboxChange = (e, key) => {\r\n        let temp = [...formData.checkboxOptions];\r\n        temp[key] = e.target.value;\r\n        setFormData({ ...formData, checkboxOptions: temp });\r\n    }\r\n\r\n    const addCheckboxOption = () => {\r\n        if(formData.checkboxOptions){\r\n            setFormData(\r\n                { ...formData, checkboxOptions: [...formData.checkboxOptions, \"\"] }\r\n            );\r\n        } else {\r\n            setFormData({ ...formData, checkboxOptions: [\"\"] });\r\n        }\r\n        \r\n    }\r\n\r\n    const removeCheckboxOption = (key) => {\r\n        let temp = [...formData.checkboxOptions];\r\n        temp.splice(key, 1);\r\n        setFormData({ ...formData, checkboxOptions: temp });\r\n    }\r\n    /* Dropdown functions */\r\n    const onDropdownChange = (e, key) => {\r\n        let temp = [...formData.dropdownOptions];\r\n        temp[key] = e.target.value;\r\n        setFormData({ ...formData, dropdownOptions: temp });\r\n    }\r\n\r\n    const addDropdownOption = () => {\r\n        if(formData.dropdownOptions) {\r\n            setFormData(\r\n                { ...formData, dropdownOptions: [...formData.dropdownOptions, \"\"] }\r\n            );\r\n        } else {\r\n            setFormData(\r\n                { ...formData, dropdownOptions: [\"\"] }\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    const removeDropdownOption = (key) => {\r\n        let temp = [...formData.dropdownOptions];\r\n        temp.splice(key, 1);\r\n        setFormData({ ...formData, dropdownOptions: temp });\r\n    }\r\n\r\n    /* On Back Click */\r\n    const onBackClick = () => {\r\n        clearUser();\r\n        clearForm();\r\n        history.goBack();\r\n    }\r\n\r\n    /* On Submit */\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        clearUser();\r\n        clearForm();\r\n        updateForm(match.params.formId, formData);\r\n        history.goBack();\r\n    }\r\n\r\n    const {\r\n        title,\r\n        description,\r\n        shortTextTitle,\r\n        longTextTitle,\r\n        multipleChoiceTitle,\r\n        multipleChoiceOptions,\r\n        checkboxTitle,\r\n        checkboxOptions,\r\n        dropdownTitle,\r\n        dropdownOptions\r\n    } = formData;\r\n\r\n    return form && !showPreview ? (\r\n        <Container fluid>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col xs={6}>\r\n                    <Form className=\"mt-4 mb-4\" onSubmit={(e) => onSubmit(e)}>\r\n                        <Form.Group controlId=\"formDescription\" className=\"p-3 rounded bg-white\">\r\n                            <Form.Control className=\"mb-2\" type=\"text\" value={title} name=\"title\" onChange={(e) => onChange(e)} />\r\n                            <Form.Control type=\"text\" value={description} name=\"description\" onChange={(e) => onChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"textForm\" className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Short Text Field</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={shortTextTitle} name=\"shortTextTitle\" onChange={(e) => onChange(e)} />\r\n                            <Form.Control type=\"text\" readOnly={true} placeholder=\"Short answer text\" />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Long Text Field</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={longTextTitle} name=\"longTextTitle\" onChange={(e) => onChange(e)} />\r\n                            <Form.Control as='textarea' readOnly={true} />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Multiple Choice</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={multipleChoiceTitle} name=\"multipleChoiceTitle\" onChange={(e) => onChange(e)} />\r\n                            {multipleChoiceOptions && multipleChoiceOptions.length > 0 && (\r\n                                multipleChoiceOptions.map((value, key) => (\r\n                                    <Form.Row key={key} className=\"mb-2\">\r\n                                        <Col xs={4}>\r\n                                            <Form.Check label={value} type=\"radio\" disabled />\r\n                                        </Col>\r\n                                        <Col xs={7}>\r\n                                            <Form.Control type=\"text\" value={value || ''} onChange={(e) => onRadioButtonChange(e, key)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button onClick={() => removeRadioOption(key)}>-</Button>\r\n                                        </Col>\r\n                                    </Form.Row>\r\n                                ))\r\n                            )}\r\n                            <Form.Row className=\"mt-4\">\r\n                                <Button onClick={() => addRadioOption()}>+</Button>\r\n                            </Form.Row>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Checkbox</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={checkboxTitle} name=\"checkboxTitle\" onChange={(e) => onChange(e)} />\r\n                            {checkboxOptions && checkboxOptions.length > 0 && (\r\n                                checkboxOptions.map((value, key) => (\r\n                                    <Form.Row key={key} className=\"mb-2\">\r\n                                        <Col xs={4}>\r\n                                            <Form.Check label={value} type=\"checkbox\" disabled />\r\n                                        </Col>\r\n                                        <Col xs={7}>\r\n                                            <Form.Control type=\"text\" value={value || ''} onChange={(e) => onCheckboxChange(e, key)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button onClick={() => removeCheckboxOption(key)}>-</Button>\r\n                                        </Col>\r\n                                    </Form.Row>\r\n                                ))\r\n                            )}\r\n                            <Form.Row className=\"mt-4\">\r\n                                <Button onClick={() => addCheckboxOption()}>+</Button>\r\n                            </Form.Row>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"p-3 rounded bg-white\">\r\n                            <Form.Label>Dropdown</Form.Label>\r\n                            <Form.Control className=\"mb-2\" type=\"text\" placeholder=\"Question\" value={dropdownTitle} name=\"dropdownTitle\" onChange={(e) => onChange(e)} />\r\n                            <Form.Control className=\"mb-2\" as=\"select\" defaultValue=\"Select\" disabled>\r\n                                {dropdownOptions && dropdownOptions.length > 0 && (\r\n                                    dropdownOptions.map((value, key) => (\r\n                                        <option key={key}>{value}</option>\r\n                                    ))\r\n                                )}\r\n                            </Form.Control>\r\n                            {dropdownOptions && dropdownOptions.length > 0 && (\r\n                                dropdownOptions.map((value, key) => (\r\n                                    <Form.Row key={key}  className=\"mb-2\">\r\n                                        <Col xs={1} className=\"text-center\">\r\n                                            <p>{key+1}.</p>\r\n                                        </Col>\r\n                                        <Col xs={10}>\r\n                                            <Form.Control type=\"text\" value={value || ''} onChange={(e) => onDropdownChange(e, key)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button onClick={() => removeDropdownOption(key)}>-</Button>\r\n                                        </Col>\r\n                                    </Form.Row>\r\n                                ))\r\n                            )}\r\n                            <Form.Row className=\"mt-4\">\r\n                                <Button onClick={() => addDropdownOption()}>+</Button>\r\n                            </Form.Row>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mt-4\">\r\n                            <Button className=\"mr-2\" variant=\"secondary\" type=\"button\" onClick={() => onBackClick()}>Back</Button>\r\n                            <Button className=\"mr-2\" type=\"submit\">Save Form</Button>\r\n                            <Button type=\"button\" onClick={() => setShowPreview(true)}>Preview Form</Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    ) : (\r\n        <PreviewForm formData={{ formData, setShowPreview }}/>\r\n    );\r\n}\r\n\r\nEditForm.propTypes = {\r\n    updateForm: PropTypes.func.isRequired,\r\n    getForm: PropTypes.func.isRequired,\r\n    form: PropTypes.object.isRequired,\r\n    clearUser: PropTypes.func.isRequired,\r\n    clearForm: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    form: state.form\r\n})\r\n\r\nexport default connect(mapStateToProps, { updateForm, getForm, clearUser, clearForm })(EditForm);","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\store.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\index.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\user.js",["89"],"import {\r\n    GET_FORMS,\r\n    GET_FORMS_ERROR,\r\n    PUBLISH_FORM,\r\n    GET_PUBLISHED_FORMS,\r\n    GET_NOTIFICATIONS,\r\n    RESET_NOTIFICATIONS,\r\n    GET_ARCHIVED_FORMS,\r\n    CLEAR_USER\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    forms: null,\r\n    publishedForms: null,\r\n    archivedForms: null,\r\n    notifications: [],\r\n    loading: true,\r\n    error: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch(type) {\r\n        case GET_FORMS:\r\n            return {\r\n                ...state,\r\n                forms: payload,\r\n                loading: false\r\n            };\r\n        case PUBLISH_FORM:\r\n            return {\r\n                ...state,\r\n                forms: payload[0],\r\n                publishedForms: payload[1],\r\n                loading: false\r\n            }\r\n        case GET_PUBLISHED_FORMS:\r\n            return {\r\n                ...state,\r\n                publishedForms: payload,\r\n                loading: false\r\n            }\r\n        case GET_ARCHIVED_FORMS:\r\n            return {\r\n                ...state,\r\n                archivedForms: payload,\r\n                loading: false\r\n            }\r\n        case GET_NOTIFICATIONS:\r\n            return {\r\n                ...state,\r\n                notifications: payload,\r\n                loading: false\r\n            }\r\n        case RESET_NOTIFICATIONS:\r\n            return {\r\n                ...state,\r\n                notifications: payload,\r\n                loading: false\r\n            }\r\n        case GET_FORMS_ERROR:\r\n            return {\r\n                ...state,\r\n                error: payload,\r\n                loading: false\r\n            }\r\n        case CLEAR_USER:\r\n            return {\r\n                ...state,\r\n                forms: null,\r\n                publishedForms: null,\r\n                archivedForms: null,\r\n                loading: false\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\types.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\reducers\\form.js",["90"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\user.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\utils\\api.js",[],["91","92"],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\NewForm.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\actions\\form.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\layouts\\TopBar.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\PreviewForm.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\PublishedForm.js",[],"C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\ResponseView.js",["93"],"import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Table, Row, Button, Container } from 'react-bootstrap';\r\n\r\nimport { getFormResponses, clearForm } from '../../actions/form';\r\n\r\nconst ResponseView = ({\r\n    form: { responses },\r\n    getFormResponses,\r\n    clearForm,\r\n    match,\r\n    history \r\n}, ) => {\r\n\r\n    useEffect(() => {\r\n        if(!responses) getFormResponses(match.params.formId);\r\n    }, [responses, getFormResponses, match.params.formId]);\r\n\r\n    const onGoBack = () => {\r\n        clearForm();\r\n        history.push(\"\");\r\n    }\r\n\r\n    return responses && responses.length > 0 ? (\r\n        <Container fluid className=\"p-4\">\r\n            <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Short Text Response</th>\r\n                        <th>Long Text Response</th>\r\n                        <th>Multiple Choice Response</th>\r\n                        <th>Checkbox Response</th>\r\n                        <th>Dropdown Response</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {responses.length > 0 && (\r\n                        responses.map((response,key) => (\r\n                            <tr key={key}>\r\n                                <td>{response.shortTextResponse}</td>\r\n                                <td>{response.longTextResponse}</td>\r\n                                <td>{response.multipleChoiceResponse}</td>\r\n                                <td>{response.checkboxResponse}</td>\r\n                                <td>{response.dropdownResponse}</td>\r\n                            </tr>\r\n                        ))\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <Row className=\"mt-4 ml-1\">\r\n                <Button type=\"button\" variant=\"secondary\" onClick={() => onGoBack()}>Go Back</Button>\r\n            </Row>\r\n        </Container>\r\n    ) : (\r\n        <Container fluid className=\"p-4\">\r\n            <h3>No responses yet...</h3>\r\n            <Row className=\"mt-4 ml-1\">\r\n                <Button type=\"button\" variant=\"secondary\" onClick={() => onGoBack()}>Go Back</Button>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nResponseView.propTypes = {\r\n    form: PropTypes.object.isRequired,\r\n    getFormResponses: PropTypes.func.isRequired,\r\n    clearForm: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    form: state.form\r\n})\r\n\r\nexport default connect(mapStateToProps, { getFormResponses, clearForm })(ResponseView);","C:\\Users\\Owner\\Documents\\GitHub\\TELUS_Business_Case\\client\\src\\components\\form-components\\ArchivedForm.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"94","replacedBy":"98"},{"ruleId":"96","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":6,"column":45,"nodeType":"102","messageId":"103","endLine":6,"endColumn":50},{"ruleId":"104","severity":1,"message":"105","line":21,"column":1,"nodeType":"106","endLine":79,"endColumn":2},{"ruleId":"104","severity":1,"message":"105","line":17,"column":1,"nodeType":"106","endLine":56,"endColumn":2},{"ruleId":"94","replacedBy":"107"},{"ruleId":"96","replacedBy":"108"},{"ruleId":"100","severity":1,"message":"109","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],["110"],["111"],"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["110"],["111"],"'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation"]